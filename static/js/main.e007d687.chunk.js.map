{"version":3,"sources":["containers/Game.css","components/Square.css","App.css","UI/Modal/Modal.css","UI/Backdrop/Backdrop.css","components/Board.css","hoc/Auxilary.js","UI/Backdrop/Backdrop.js","UI/Modal/Modal.js","components/GameOver.js","components/Square.js","components/Board.js","containers/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","aux","props","children","backDrop","show","className","classes","Backdrop","onClick","modalClosed","modal","modalClose","Modal","style","transform","opacity","zIndex","gameOver","message","square","value","playerClass","playerX","join","playerO","clicked","Board","createRow","i","key","squares","row","col","board","cellNo","rows","j","push","boardRow","createBoard","initialState","history","Array","fill","xIsNext","totalSteps","Game","state","calculateWinner","lines","length","a","b","c","clickHandler","squareIndex","updatedSquares","updatedTotalSteps","won","status","getStatus","setState","winner","whosNext","resetGame","playerStatusCss","this","playerStatusX","playerStatusO","playerStatus","GameOver","game","gameBoard","resetButton","Component","App","header","fontPrimary","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.e007d687.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"_2sZl1jqqeCzC80L04qifiS\",\"gameInfo\":\"_1IXd-ZbVEWL5rKa1p4rWcM\",\"gameBoard\":\"_3s5U8VW36CEOLTxNsCFnEd\",\"playerStatus\":\"OwTLA0czALeHPJqLxMQa\",\"playerStatusX\":\"_3O7QxPDoQSLnRBw0-ao267\",\"playerStatusO\":\"_3t8dBnyi0z34OOJRiQpnXB\",\"resetButton\":\"_2Z7vLncWbUNZhBmf7sjWlC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"square\":\"_2e0WrkzkRXceGvYvY73Fdg\",\"playerX\":\"_3z6n_9U1dtpUddsHyrZ3w5\",\"playerO\":\"_2qJPnxna0Y22UnyPJkzhL8\",\"square--green\":\"_3Y7v3fTPOZO-Nj6cj_wWvI\",\"kbd-navigation\":\"_3Msm6i4mOkAqAnhFJnbmRn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"_1o-FpbQrR11SDFN-G7O4U3\",\"App-logo\":\"_3JCPttIlaO1n9gbarj-AYQ\",\"App-logo-spin\":\"RvI1Jd7nZvV5oabR4RbAY\",\"AppHeader\":\"_1k1HgGYk0_KpeP2A9VTe30\",\"fontPrimary\":\"_22Qjbdh8_7XTYSVeuqpTyF\",\"header\":\"hwRc6f9WKlpNo0-FJMnLB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"_1GCRtvCs3nN8PCEZl6x_cr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"_3JyJ9DTQh1GEAUCljcI-cT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"_2NWyfvGE-OUoIkNwZCdnR7\",\"boardRow\":\"jMUyhlOWP6HXIlaRjHvRH\"};","const aux = ( props ) => props.children;\r\n\r\nexport default aux;","import React from 'react';\r\nimport classes from './Backdrop.css';\r\nconst backDrop = (props) => {\r\n    return props.show ? <div className={classes.Backdrop} onClick={props.modalClosed}></div> : null;\r\n}\r\n\r\nexport default backDrop;","import React from 'react';\r\nimport classes from './Modal.css'\r\nimport Aux from '../../hoc/Auxilary';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\n\r\nconst modal = (props) => {\r\n    \r\n    return (\r\n        <Aux>\r\n            <Backdrop show={props.show} modalClosed={props.modalClose}/>\r\n            <div\r\n                className={classes.Modal}\r\n                style={{\r\n                    transform: props.show ? 'traslateY(0)' : 'traslateY(-100vh)',\r\n                    opacity: props.show ? '1' : '0',\r\n                    zIndex: props.show ? '500' : '-1'\r\n                }}>\r\n                {props.children}\r\n            </div>\r\n        </Aux>\r\n    );\r\n};\r\n\r\nexport default modal;   ","import React from 'react';\r\nimport Aux from '../hoc/Auxilary';\r\n\r\nconst gameOver = (props) => {\r\n    return (\r\n        <Aux>\r\n            <h3>Game Over</h3>\r\n            <p>{props.message}</p>\r\n        </Aux>\r\n    );\r\n}\r\n\r\nexport default gameOver;","import React from 'react';\r\nimport classes from './Square.css';\r\nconst square = (props) => {\r\n    const value = props.value;\r\n    let playerClass = value === null ? classes.square : (value === 'X' ? [classes.square,classes.playerX].join(' ') : [classes.square,classes.playerO].join(' ') );\r\n    \r\n    return (\r\n        <button\r\n            onClick={props.clicked}\r\n            className={playerClass}\r\n        > {value} </button>\r\n    );\r\n};\r\n\r\nexport default square;","import React from 'react';\r\nimport Square from './Square';\r\nimport classes from './Board.css';\r\n\r\nconst Board = (props) => {\r\n    const createBoard = (row, col) => {\r\n        const board = [];\r\n        let cellNo = 0\r\n        for (let i = 0; i < row; i++) {\r\n            const rows = [];\r\n            for (let j = 0; j < col; j++) {\r\n                rows.push(createRow(cellNo++));\r\n            }\r\n            board.push(<div key={i} className={classes.boardRow}>{rows}</div>)\r\n        }\r\n\r\n        return board;\r\n    };\r\n\r\n    const createRow = (i) => {\r\n        return (\r\n            <Square\r\n                key={i}\r\n                value={(props.squares || [])[i]}\r\n                clicked={() => props.clicked(i)}\r\n            />);\r\n    };\r\n\r\n    const ret = createBoard(3, 3);\r\n    \r\n    return ret;\r\n};\r\n\r\nexport default Board;\r\n\r\n","import React, { Component } from 'react';\r\nimport Modal from '../UI/Modal/Modal';\r\nimport Aux from '../hoc/Auxilary';\r\nimport GameOver from '../components/GameOver';\r\nimport Board from '../components/Board';\r\nimport classes from './Game.css';\r\n\r\nconst initialState = {\r\n  history: [\r\n    { squares: Array(9).fill(null) }\r\n  ],\r\n  xIsNext: true,\r\n  totalSteps: 0,\r\n  gameOver: false,\r\n};\r\n\r\nclass Game extends Component {\r\n  state = initialState;\r\n\r\n  calculateWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  clickHandler = (squareIndex) => {\r\n    const updatedSquares = [...(this.state.history || [])[0].squares];\r\n    updatedSquares[squareIndex] = this.state.xIsNext ? 'X' : 'O';\r\n    const updatedTotalSteps = this.state.totalSteps + 1;\r\n    const won = this.calculateWinner(updatedSquares);\r\n    const status = this.getStatus(won, updatedTotalSteps);\r\n\r\n    if ((this.state.history || [])[0].squares[squareIndex]) {\r\n\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      history: [\r\n        { squares: updatedSquares }\r\n      ],\r\n      xIsNext: !this.state.xIsNext,\r\n      totalSteps: updatedTotalSteps,\r\n      gameOver: status,\r\n    });\r\n  };\r\n\r\n  getStatus = (winner, totalSteps) => {\r\n    let status = false;\r\n    if (winner) {\r\n      status = `Winner is ${winner}!`;\r\n    } else if (totalSteps === 9) {\r\n      status = \"It's a tie!\";\r\n    }\r\n\r\n    return status;\r\n  };\r\n\r\n  whosNext = () => {\r\n    return (\"It's your turn \" + (this.state.xIsNext ? 'X' : 'O'));\r\n  }\r\n\r\n  resetGame = () => {\r\n    this.setState(initialState);\r\n  };\r\n\r\n  render() {\r\n    let playerStatusCss = this.state.xIsNext ? classes.playerStatusX : classes.playerStatusO;\r\n    playerStatusCss = [classes.playerStatus, playerStatusCss].join(' ');\r\n\r\n    return (\r\n      <Aux>\r\n        <Modal show={this.state.gameOver} modalClose={this.resetGame}>\r\n          <GameOver message={this.state.gameOver} />\r\n        </Modal>\r\n        <div className={classes.game}>\r\n          <div className={playerStatusCss}>{this.whosNext()}</div>\r\n          <div className={classes.gameBoard}>\r\n            <Board\r\n              squares={(this.state.history || [])[0].squares}\r\n              clicked={this.clickHandler}\r\n            />\r\n          </div>\r\n          <button className={classes.resetButton} onClick={this.resetGame}>Restart</button>\r\n        </div>\r\n      </Aux>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Game;","import React from 'react';\nimport classes from './App.css';\nimport Game from './containers/Game';\nfunction App() {\n  return (\n    \n    <div className={classes.App}>\n      <div className={classes.header}>\n          <h1 className={classes.fontPrimary}>Tic Tac Toe</h1>\n        </div>\n      <Game/>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}